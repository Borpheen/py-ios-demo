name: build-ios-ipa
on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build deps
        run: |
          set -e
          brew update
          brew install autoconf automake libtool pkg-config ccache ldid
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install Cython kivy kivy-ios

      - name: Build kivy-ios distribution
        run: |
          set -e
          python -m kivy_ios.toolchain build python3 kivy sdl2 sdl2_image sdl2_mixer sdl2_ttf pillow

      - name: Create Xcode project
        run: |
          set -e
          # toolchain create <AppName> <project_directory>
          python -m kivy_ios.toolchain create demoapp .

      - name: Detect scheme (trim)
        id: detect
        shell: bash
        run: |
          set -e
          PROJ="demoapp-ios/demoapp.xcodeproj"
          OUT=$(xcodebuild -list -project "$PROJ" 2>/dev/null || true)
          SCHEME=$(printf "%s\n" "$OUT" | awk '/Schemes:/{getline;print;exit}')
          SCHEME=$(printf "%s" "$SCHEME" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          if [ -z "$SCHEME" ]; then SCHEME="demoapp"; fi
          echo "scheme=$SCHEME" >> "$GITHUB_OUTPUT"

      - name: Archive (no signing) to .xcarchive
        run: |
          set -e
          PROJ="demoapp-ios/demoapp.xcodeproj"
          SCHEME="${{ steps.detect.outputs.scheme }}"
          xcodebuild -project "$PROJ" \
            -scheme "$SCHEME" -configuration Release \
            -sdk iphoneos -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO \
            -archivePath build/App.xcarchive \
            archive | tee xcodebuild.log

      - name: Locate app bundle (search all locations)
        id: locate
        shell: bash
        run: |
          set -e
          APP_DIR=""

          # 1) Our requested archive path
          if [ -d "build/App.xcarchive/Products/Applications" ]; then
            APP_DIR=$(find build/App.xcarchive/Products/Applications -maxdepth 1 -type d -name "*.app" -not -name "IDLE.app" | head -n1 || true)
          fi

          # 2) Xcode default Archives folder
          if [ -z "$APP_DIR" ] && [ -d "$HOME/Library/Developer/Xcode/Archives" ]; then
            APP_DIR=$(find "$HOME/Library/Developer/Xcode/Archives" -type d -path "*/Products/Applications/*.app" -not -name "IDLE.app" | head -n1 || true)
          fi

          # 3) Release-iphoneos products (from raw builds)
          if [ -z "$APP_DIR" ]; then
            APP_DIR=$(find build/Build/Products -type d -path "*/Release-iphoneos/*.app" -not -name "IDLE.app" | head -n1 || true)
          fi

          # 4) Global DerivedData
          if [ -z "$APP_DIR" ] && [ -d "$HOME/Library/Developer/Xcode/DerivedData" ]; then
            APP_DIR=$(find "$HOME/Library/Developer/Xcode/DerivedData" -type d -path "*/Build/Products/Release-iphoneos/*.app" -not -name "IDLE.app" | head -n1 || true)
          fi

          # 5) Last resort: anywhere
          if [ -z "$APP_DIR" ]; then
            APP_DIR=$(find . -type d -name "*.app" -not -name "IDLE.app" | head -n1 || true)
          fi

          if [ -z "$APP_DIR" ]; then
            echo "No .app found."
            echo "Debug listing:"
            find build -type d -name "*.app" -print || true
            if [ -d "$HOME/Library/Developer/Xcode/DerivedData" ]; then
              find "$HOME/Library/Developer/Xcode/DerivedData" -type d -path "*/Build/Products/Release-iphoneos/*.app" -print || true
            fi
            if [ -d "$HOME/Library/Developer/Xcode/Archives" ]; then
              find "$HOME/Library/Developer/Xcode/Archives" -type d -path "*/Products/Applications/*.app" -print || true
            fi
            exit 1
          fi

          if [ ! -f "$APP_DIR/Info.plist" ]; then
            echo "Found .app but Info.plist is missing: $APP_DIR"
            ls -la "$APP_DIR"
            exit 1
          fi

          echo "app_dir=$APP_DIR" >> "$GITHUB_OUTPUT"
          echo "$APP_DIR" > app_dir.txt

      - name: Package unsigned IPA
        shell: bash
        run: |
          set -e
          APP_PATH="${{ steps.locate.outputs.app_dir }}"
          rm -rf Payload
          mkdir -p Payload
          cp -R "$APP_PATH" Payload/
          test -f "Payload/$(basename "$APP_PATH")/Info.plist"
          /usr/bin/ditto -c -k --sequesterRsrc --keepParent Payload demoapp-unsigned.ipa
          /usr/bin/zipinfo -1 demoapp-unsigned.ipa | tee ipa_contents.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipa_and_logs
          path: |
            demoapp-unsigned.ipa
            xcodebuild.log
            ipa_contents.txt
            app_dir.txt
